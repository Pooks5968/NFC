{'android.permission.CHANGE_NETWORK_STATE': ['android.net.ConnectivityManager.requestRouteToHost(int,int)', 'android.net.ConnectivityManager.setMobileDataEnabled(boolean)', 'android.net.ConnectivityManager.setNetworkPreference(int)', 'android.net.ConnectivityManager.setRadio(int,boolean)', 'android.net.ConnectivityManager.setRadios(boolean)', 'android.net.ConnectivityManager.startUsingNetworkFeature(int,java.lang.String)', 'android.net.ConnectivityManager.stopUsingNetworkFeature(int,java.lang.String)', 'android.net.ConnectivityManager.tether(java.lang.String)', 'android.net.ConnectivityManager.untether(java.lang.String)', 'android.net.IConnectivityManager$Stub$Proxy.requestRouteToHost(int,int)', 'android.net.IConnectivityManager$Stub$Proxy.setMobileDataEnabled(boolean)', 'android.net.IConnectivityManager$Stub$Proxy.setNetworkPreference(int)', 'android.net.IConnectivityManager$Stub$Proxy.setRadio(int,boolean)', 'android.net.IConnectivityManager$Stub$Proxy.setRadios(boolean)', 'android.net.IConnectivityManager$Stub$Proxy.startUsingNetworkFeature(int,java.lang.String,android.os.IBinder)', 'android.net.IConnectivityManager$Stub$Proxy.stopUsingNetworkFeature(int,java.lang.String)', 'android.net.IConnectivityManager$Stub$Proxy.tether(java.lang.String)', 'android.net.IConnectivityManager$Stub$Proxy.untether(java.lang.String)', 'android.os.INetworkManagementService$Stub$Proxy.attachPppd(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)', 'android.os.INetworkManagementService$Stub$Proxy.detachPppd(java.lang.String)', 'android.os.INetworkManagementService$Stub$Proxy.disableNat(java.lang.String,java.lang.String)', 'android.os.INetworkManagementService$Stub$Proxy.enableNat(java.lang.String,java.lang.String)', 'android.os.INetworkManagementService$Stub$Proxy.setAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)', 'android.os.INetworkManagementService$Stub$Proxy.setInterfaceThrottle(java.lang.String,int,int)', 'android.os.INetworkManagementService$Stub$Proxy.setIpForwardingEnabled(boolean)', 'android.os.INetworkManagementService$Stub$Proxy.startAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)', 'android.os.INetworkManagementService$Stub$Proxy.startUsbRNDIS()', 'android.os.INetworkManagementService$Stub$Proxy.stopAccessPoint()', 'android.os.INetworkManagementService$Stub$Proxy.stopTethering()', 'android.os.INetworkManagementService$Stub$Proxy.stopUsbRNDIS()', 'android.os.INetworkManagementService$Stub$Proxy.tetherInterface(java.lang.String)', 'android.os.INetworkManagementService$Stub$Proxy.unregisterObserver(android.net.INetworkManagementEventObserver)', 'android.os.INetworkManagementService$Stub$Proxy.untetherInterface(java.lang.String)'], 'android.permission.SEND_SMS': ['android.telephony.gsm.SmsManager.copyMessageToSim([B,[B,int)', 'android.telephony.gsm.SmsManager.deleteMessageFromSim(int)', 'android.telephony.gsm.SmsManager.sendDataMessage(java.lang.String,java.lang.String,short,[B,android.app.PendingIntent,android.app.PendingIntent)', 'android.telephony.gsm.SmsManager.sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)', 'android.telephony.gsm.SmsManager.sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)', 'android.telephony.gsm.SmsManager.updateMessageOnSim(int,int,[B)', 'android.telephony.SmsManager.copyMessageToIcc([B,[B,int)', 'android.telephony.SmsManager.deleteMessageFromIcc(int)', 'android.telephony.SmsManager.sendDataMessage(java.lang.String,java.lang.String,short,[B,android.app.PendingIntent,android.app.PendingIntent)', 'android.telephony.SmsManager.sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)', 'android.telephony.SmsManager.sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)', 'android.telephony.SmsManager.updateMessageOnIcc(int,int,[B)', 'com.android.internal.telephony.ISms$Stub$Proxy.sendData(java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)', 'com.android.internal.telephony.ISms$Stub$Proxy.sendMultipartText(java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List)', 'com.android.internal.telephony.ISms$Stub$Proxy.sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)'], 'android.permission.WRITE_SYNC_SETTINGS': ['android.app.ContextImpl$ApplicationContentResolver.addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)', 'android.app.ContextImpl$ApplicationContentResolver.removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)', 'android.app.ContextImpl$ApplicationContentResolver.setIsSyncable(android.accounts.Account,java.lang.String,int)', 'android.app.ContextImpl$ApplicationContentResolver.setMasterSyncAutomatically(boolean)', 'android.app.ContextImpl$ApplicationContentResolver.setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)', 'android.content.ContentResolver.addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)', 'android.content.ContentResolver.removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)', 'android.content.ContentResolver.setIsSyncable(android.accounts.Account,java.lang.String,int)', 'android.content.ContentResolver.setMasterSyncAutomatically(boolean)', 'android.content.ContentResolver.setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)', 'android.content.ContentService.addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)', 'android.content.ContentService.removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)', 'android.content.ContentService.setIsSyncable(android.accounts.Account,java.lang.String,int)', 'android.content.ContentService.setMasterSyncAutomatically(boolean)', 'android.content.ContentService.setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)', 'android.content.IContentService$Stub$Proxy.addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)', 'android.content.IContentService$Stub$Proxy.removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)', 'android.content.IContentService$Stub$Proxy.setIsSyncable(android.accounts.Account,java.lang.String,int)', 'android.content.IContentService$Stub$Proxy.setMasterSyncAutomatically(boolean)', 'android.content.IContentService$Stub$Proxy.setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)'], 'android.permission.WRITE_SETTINGS': ['android.app.backup.IBackupManager$Stub$Proxy.setAutoRestore(boolean)', 'android.app.backup.IBackupManager$Stub$Proxy.setBackupEnabled(boolean)', 'android.bluetooth.BluetoothA2dp.setSinkPriority(android.bluetooth.BluetoothDevice,int)', 'android.bluetooth.IBluetoothA2dp$Stub$Proxy.setSinkPriority(android.bluetooth.BluetoothDevice,int)', 'android.media.RingtoneManager.setActualDefaultRingtoneUri(android.content.Context,int,android.net.Uri)', 'android.net.ConnectivityManager.setMobileDataEnabled(boolean)', 'android.net.ConnectivityManager.setNetworkPreference(int)', 'android.net.IConnectivityManager$Stub$Proxy.setMobileDataEnabled(boolean)', 'android.net.IConnectivityManager$Stub$Proxy.setNetworkPreference(int)', 'android.os.IMountService$Stub$Proxy.setAutoStartUms', 'android.os.IMountService$Stub$Proxy.setPlayNotificationSounds', 'android.os.IPowerManager$Stub$Proxy.setStayOnSetting(int)', 'android.provider.Settings$Bookmarks.add(android.content.ContentResolver,android.content.Intent,java.lang.String,java.lang.String,char,int)', 'android.provider.Settings$Bookmarks.getIntentForShortcut(android.content.ContentResolver,char)', 'android.provider.Settings$Secure.putFloat(android.content.ContentResolver,java.lang.String,float)', 'android.provider.Settings$Secure.putInt(android.content.ContentResolver,java.lang.String,int)', 'android.provider.Settings$Secure.putLong(android.content.ContentResolver,java.lang.String,long)', 'android.provider.Settings$Secure.putString(android.content.ContentResolver,java.lang.String,java.lang.String)', 'android.provider.Settings$Secure.setLocationProviderEnabled(android.content.ContentResolver,java.lang.String,boolean)', 'android.provider.Settings$System.putConfiguration(android.content.ContentResolver,android.content.res.Configuration)', 'android.provider.Settings$System.putFloat(android.content.ContentResolver,java.lang.String,float)', 'android.provider.Settings$System.putInt(android.content.ContentResolver,java.lang.String,int)', 'android.provider.Settings$System.putLong(android.content.ContentResolver,java.lang.String,long)', 'android.provider.Settings$System.putString(android.content.ContentResolver,java.lang.String,java.lang.String)', 'android.provider.Settings$System.setShowGTalkServiceStatus(android.content.ContentResolver,boolean)', 'android.server.BluetoothA2dpService.handleSinkStateChange(android.bluetooth.BluetoothDevice)', 'android.server.BluetoothA2dpService.setSinkPriority(android.bluetooth.BluetoothDevice,int)', 'android.server.BluetoothA2dpService.setSinkPriority(android.bluetooth.BluetoothDevice,int)', 'android.server.BluetoothService.persistBluetoothOnSetting(boolean)'], 'android.permission.USE_CREDENTIALS': ['android.accounts.AccountManager.blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)', 'android.accounts.AccountManager.getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)', 'android.accounts.AccountManager.getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)', 'android.accounts.AccountManager.invalidateAuthToken(java.lang.String,java.lang.String)', 'android.accounts.AccountManagerService.getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)', 'android.accounts.AccountManagerService.invalidateAuthToken(java.lang.String,java.lang.String)', 'android.accounts.IAccountManager$Stub$Proxy.getAuthToken(android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String,boolean,boolean,android.os.Bundle)', 'android.accounts.IAccountManager$Stub$Proxy.invalidateAuthToken(java.lang.String,java.lang.String)'], 'android.permission.SEND_SMS_NO_CONFIRMATION': [], 'android.permission.KILL_BACKGROUND_PROCESSES': ['android.app.ActivityManager.killBackgroundProcesses(java.lang.String)', 'android.app.ActivityManager.restartPackage(java.lang.String)', 'android.app.ActivityManagerNative.killBackgroundProcesses(java.lang.String)', 'android.app.ActivityManagerNative.restartPackage(java.lang.String)', 'android.app.IActivityManager$Stub$Proxy.killBackgroundProcesses(java.lang.String)'], 'android.permission.WRITE_SMS': ['android.provider.Telephony$Sms.addMessageToUri(android.content.ContentResolver,android.net.Uri,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,boolean,long)', 'android.provider.Telephony$Sms.addMessageToUri(android.content.ContentResolver,android.net.Uri,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,boolean)', 'android.provider.Telephony$Sms.moveMessageToFolder(android.content.Context,android.net.Uri,int,int)', 'android.provider.Telephony$Sms$Draft.addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)', 'android.provider.Telephony$Sms$Draft.saveMessage(android.content.ContentResolver,android.net.Uri,java.lang.String)', 'android.provider.Telephony$Sms$Inbox.addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean)', 'android.provider.Telephony$Sms$Outbox.addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long,boolean,long)', 'android.provider.Telephony$Sms$Sent.addMessage(android.content.ContentResolver,java.lang.String,java.lang.String,java.lang.String,java.lang.Long)'], 'android.permission.CHANGE_COMPONENT_ENABLED_STATE': ['android.app.ContextImpl$ApplicationPackageManager.setApplicationEnabledSetting(String,int,int)', 'android.app.ContextImpl$ApplicationPackageManager.setComponentEnabledSetting(ComponentName,int,int)', 'android.content.pm.IPackageManager$Stub$Proxy.setApplicationEnabledSetting(java.lang.String,int,int)', 'android.content.pm.IPackageManager$Stub$Proxy.setComponentEnabledSetting(android.content.ComponentName,int,int)', 'android.content.pm.PackageManager.setApplicationEnabledSetting(java.lang.String,int,int)', 'android.content.pm.PackageManager.setComponentEnabledSetting(android.content.ComponentName,int,int)', 'android.app.ContextImpl$ApplicationPackageManager.setApplicationEnabledSetting(java.lang.String,int,int)', 'android.app.ContextImpl$ApplicationPackageManager.setComponentEnabledSetting(android.content.ComponentName,int,int)'], 'android.permission.CALL_PHONE': ['com.android.internal.telephony.ITelephony$Stub$Proxy.call(java.lang.String)', 'com.android.internal.telephony.ITelephony$Stub$Proxy.endCall()'], 'android.permission.VIBRATE': ['android.app.NotificationManager.notify(int,android.app.Notification)', 'android.app.NotificationManager.notify(java.lang.String,int,android.app.Notification)', 'android.os.IVibratorService$Stub$Proxy.cancelVibrate(android.os.IBinder)', 'android.os.IVibratorService$Stub$Proxy.vibrate(long,android.os.IBinder)', 'android.os.IVibratorService$Stub$Proxy.vibratePattern([J,int,android.os.IBinder)', 'android.os.Vibrator.cancel()', 'android.os.Vibrator.vibrate([J,int)', 'android.os.Vibrator.vibrate(long)'], 'android.permission.CHANGE_WIFI_STATE': ['android.net.ConnectivityManager.setRadio(int,boolean)', 'android.net.ConnectivityManager.setRadios(boolean)', 'android.net.IConnectivityManager$Stub$Proxy.setRadio(int,boolean)', 'android.net.IConnectivityManager$Stub$Proxy.setRadios(boolean)', 'android.net.wifi.IWifiManager$Stub$Proxy.addOrUpdateNetwork(android.net.wifi.WifiConfiguration)', 'android.net.wifi.IWifiManager$Stub$Proxy.disableNetwork(int)', 'android.net.wifi.IWifiManager$Stub$Proxy.disconnect()', 'android.net.wifi.IWifiManager$Stub$Proxy.enableNetwork(int,boolean)', 'android.net.wifi.IWifiManager$Stub$Proxy.pingSupplicant()', 'android.net.wifi.IWifiManager$Stub$Proxy.reassociate()', 'android.net.wifi.IWifiManager$Stub$Proxy.reconnect()', 'android.net.wifi.IWifiManager$Stub$Proxy.removeNetwork(int)', 'android.net.wifi.IWifiManager$Stub$Proxy.saveConfiguration()', 'android.net.wifi.IWifiManager$Stub$Proxy.setNumAllowedChannels(int,boolean)', 'android.net.wifi.IWifiManager$Stub$Proxy.setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)', 'android.net.wifi.IWifiManager$Stub$Proxy.setWifiEnabled(boolean)', 'android.net.wifi.IWifiManager$Stub$Proxy.startScan(boolean)', 'android.net.wifi.WifiManager.addNetwork(android.net.wifi.WifiConfiguration)', 'android.net.wifi.WifiManager.addOrUpdateNetwork(android.net.wifi.WifiConfiguration)', 'android.net.wifi.WifiManager.disableNetwork(int)', 'android.net.wifi.WifiManager.disconnect()', 'android.net.wifi.WifiManager.enableNetwork(int,boolean)', 'android.net.wifi.WifiManager.pingSupplicant()', 'android.net.wifi.WifiManager.reassociate()', 'android.net.wifi.WifiManager.reconnect()', 'android.net.wifi.WifiManager.removeNetwork(int)', 'android.net.wifi.WifiManager.saveConfiguration()', 'android.net.wifi.WifiManager.setNumAllowedChannels(int,boolean)', 'android.net.wifi.WifiManager.setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)', 'android.net.wifi.WifiManager.setWifiEnabled(boolean)', 'android.net.wifi.WifiManager.startScan()', 'android.net.wifi.WifiManager.startScanActive()', 'android.os.INetworkManagementService$Stub$Proxy.startAccessPoint(android.net.wifi.WifiConfiguration,java.lang.String,java.lang.String)', 'android.os.INetworkManagementService$Stub$Proxy.stopAccessPoint()'], 'android.permission.INTERNET': ['android.app.Activity.setContentView(int)', 'android.webkit.WebSettings.setBlockNetworkLoads(boolean)', 'android.webkit.WebSettings.verifyNetworkAccess()', 'android.webkit.WebView.<init>(android.content.Context,android.util.AttributeSet,int)', 'android.webkit.WebView.<init>(android.content.Context,android.util.AttributeSet)', 'android.webkit.WebView.<init>(android.content.Context)', 'android.webkit.WebViewCore.<init>(android.content.Context,android.webkit.WebView,android.webkit.CallbackProxy,java.util.Map)', 'com.android.http.multipart.FilePart.sendData(java.io.OutputStream)', 'com.android.http.multipart.FilePart.sendDispositionHeader(java.io.OutputStream)', 'com.android.http.multipart.Part.send(java.io.OutputStream)', 'com.android.http.multipart.Part.sendParts(java.io.OutputStream,com.android.http.multipart.Part[])', 'com.android.http.multipart.Part.sendParts(java.io.OutputStream,com.android.http.multipart.Part[],byte[])', 'com.android.http.multipart.Part.sendStart(java.io.OutputStream)', 'com.android.http.multipart.Part.sendTransferEncodingHeader(java.io.OutputStream)', 'com.android.http.multipart.StringPart.sendData(java.io.OuputStream)', 'java.net.DatagramSocket.<init>()', 'java.net.DatagramSocket.<init>(int)', 'java.net.DatagramSocket.<init>(int,java.net.InetAddress)', 'java.net.DatagramSocket.<init>(java.net.SocketAddress)', 'java.net.HttpURLConnection.<init>(java.net.URL)', 'java.net.HttpURLConnection.connect()', 'java.net.MulticastSocket.<init>()', 'java.net.MulticastSocket.<init>(int)', 'java.net.MulticastSocket.<init>(java.net.SocketAddress)', 'java.net.NetworkInterface.<init>()', 'java.net.NetworkInterface.<init>(java.lang.String,int,java.net.InetAddress)', 'java.net.ServerSocket.<init>()', 'java.net.ServerSocket.<init>(int)', 'java.net.ServerSocket.<init>(int,int)', 'java.net.ServerSocket.<init>(int,int,java.net.InetAddress)', 'java.net.ServerSocket.bind(java.net.SocketAddress)', 'java.net.ServerSocket.bind(java.net.SocketAddress,int)', 'java.net.Socket.<init>()', 'java.net.Socket.<init>(java.lang.String,int)', 'java.net.Socket.<init>(java.lang.String,int,java.net.InetAddress,int)', 'java.net.Socket.<init>(java.lang.String,int,boolean)', 'java.net.Socket.<init>(java.net.InetAddress,int)', 'java.net.Socket.<init>(java.net.InetAddress,int,java.net.InetAddress,int)', 'java.net.Socket.<init>(java.net.InetAddress,int,boolean)', 'java.net.URL.getContent(java.lang.Class[])', 'java.net.URL.getContent()', 'java.net.URL.openConnection(java.net.Proxy)', 'java.net.URL.openConnection()', 'java.net.URL.openStream()', 'java.net.URLConnection.connect()', 'java.net.URLConnection.getInputStream()', 'org.apache.http.impl.client.DefaultHttpClient.<init>()', 'org.apache.http.impl.client.DefaultHttpClient.<init>(org.apache.http.params.HttpParams)', 'org.apache.http.impl.client.DefaultHttpClient.<init>(org.apache.http.conn.ClientConnectionManager,org.apache.http.params.HttpParams)', 'org.apache.http.impl.client.DefaultHttpClient.execute(org.apache.http.client.methods.HttpUriRequest)', 'org.apache.http.impl.client.DefaultHttpClient.execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)', 'org.apache.http.impl.client.DefaultHttpClient.execute(org.apache.http.HttpHost,org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)', 'org.apache.http.impl.client.DefaultHttpClient.execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)', 'org.apache.http.impl.client.DefaultHttpClient.execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)', 'org.apache.http.impl.client.DefaultHttpClient.execute(org.apache.http.HttpHost,org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)', 'org.apache.http.impl.client.DefaultHttpClient.execute(org.apache.http.HttpHost,org.apache.http.client.methods.HttpUriRequest)', 'org.apache.http.impl.client.DefaultHttpClient.execute(org.apache.http.HttpHost,org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)', 'org.apache.http.impl.client.HttpClient.execute(org.apache.http.client.methods.HttpUriRequest)', 'org.apache.http.impl.client.HttpClient.execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)', 'org.apache.http.impl.client.HttpClient.execute(org.apache.http.HttpHost,org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)', 'org.apache.http.impl.client.HttpClient.execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)', 'org.apache.http.impl.client.HttpClient.execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)', 'org.apache.http.impl.client.HttpClient.execute(org.apache.http.HttpHost,org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)', 'org.apache.http.impl.client.HttpClient.execute(org.apache.http.HttpHost,org.apache.http.client.methods.HttpUriRequest)', 'org.apache.http.impl.client.HttpClient.execute(org.apache.http.HttpHost,org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)'], 'android.permission.BLUETOOTH': ['android.bluetooth.BluetoothA2dp.connectSink(android.bluetooth.BluetoothDevice)', 'android.bluetooth.BluetoothA2dp.disconnectSink(android.bluetooth.BluetoothDevice)', 'android.bluetooth.BluetoothA2dp.getConnectedSinks()', 'android.bluetooth.BluetoothA2dp.getNonDisconnectedSinks()', 'android.bluetooth.BluetoothA2dp.getSinkPriority(android.bluetooth.BluetoothDevice)', 'android.bluetooth.BluetoothA2dp.getSinkState(android.bluetooth.BluetoothDevice)', 'android.bluetooth.BluetoothA2dp.isSinkConnected(android.bluetooth.BluetoothDevice)', 'android.bluetooth.BluetoothA2dp.resumeSink(android.bluetooth.BluetoothDevice)', 'android.bluetooth.BluetoothA2dp.setSinkPriority(android.bluetooth.BluetoothDevice,int)', 'android.bluetooth.BluetoothA2dp.suspendSink(android.bluetooth.BluetoothDevice)', 'android.bluetooth.BluetoothAdapter.cancelDiscovery()', 'android.bluetooth.BluetoothAdapter.disable()', 'android.bluetooth.BluetoothAdapter.enable()', 'android.bluetooth.BluetoothAdapter.getAddress()', 'android.bluetooth.BluetoothAdapter.getBondedDevices()', 'android.bluetooth.BluetoothAdapter.getDiscoverableTimeout()', 'android.bluetooth.BluetoothAdapter.getName()', 'android.bluetooth.BluetoothAdapter.getScanMode()', 'android.bluetooth.BluetoothAdapter.getState()', 'android.bluetooth.BluetoothAdapter.isDiscovering()', 'android.bluetooth.BluetoothAdapter.isEnabled()', 'android.bluetooth.BluetoothAdapter.listenUsingRfcommWithServiceRecord(java.lang.String,java.util.UUID)', 'android.bluetooth.BluetoothAdapter.setDiscoverableTimeout(int)', 'android.bluetooth.BluetoothAdapter.setName(java.lang.String)', 'android.bluetooth.BluetoothAdapter.setScanMode(int,int)', 'android.bluetooth.BluetoothAdapter.setScanMode(int)', 'android.bluetooth.BluetoothAdapter.startDiscovery()', 'android.bluetooth.BluetoothDevice.cancelBondProcess()', 'android.bluetooth.BluetoothDevice.cancelPairingUserInput()', 'android.bluetooth.BluetoothDevice.createBond()', 'android.bluetooth.BluetoothDevice.createRfcommSocketToServiceRecord(java.util.UUID)', 'android.bluetooth.BluetoothDevice.fetchUuidsWithSdp()', 'android.bluetooth.BluetoothDevice.getBondState()', 'android.bluetooth.BluetoothDevice.getName()', 'android.bluetooth.BluetoothDevice.getServiceChannel(android.os.ParcelUuid)', 'android.bluetooth.BluetoothDevice.getUuids()', 'android.bluetooth.BluetoothDevice.removeBond()', 'android.bluetooth.BluetoothDevice.setPairingConfirmation(boolean)', 'android.bluetooth.BluetoothDevice.setPasskey(int)', 'android.bluetooth.BluetoothDevice.setPin([B)', 'android.bluetooth.BluetoothHeadset.connectHeadset(android.bluetooth.BluetoothDevice)', 'android.bluetooth.BluetoothHeadset.disconnectHeadset()', 'android.bluetooth.BluetoothHeadset.getBatteryUsageHint()', 'android.bluetooth.BluetoothHeadset.getCurrentHeadset()', 'android.bluetooth.BluetoothHeadset.getPriority(android.bluetooth.BluetoothDevice)', 'android.bluetooth.BluetoothHeadset.getState()', 'android.bluetooth.BluetoothHeadset.isConnected(android.bluetooth.BluetoothDevice)', 'android.bluetooth.BluetoothHeadset.setPriority(android.bluetooth.BluetoothDevice,int)', 'android.bluetooth.BluetoothHeadset.startVoiceRecognition()', 'android.bluetooth.BluetoothHeadset.stopVoiceRecognition()', 'android.bluetooth.BluetoothPbap.disconnect()', 'android.bluetooth.BluetoothPbap.getClient()', 'android.bluetooth.BluetoothPbap.getState()', 'android.bluetooth.BluetoothPbap.isConnected(android.bluetooth.BluetoothDevice)', 'android.bluetooth.BluetoothSocket.connect()', 'android.bluetooth.IBluetooth$Stub$Proxy.addRfcommServiceRecord(java.lang.String,android.os.ParcelUuid,int,android.os.IBinder)', 'android.bluetooth.IBluetooth$Stub$Proxy.cancelBondProcess(java.lang.String)', 'android.bluetooth.IBluetooth$Stub$Proxy.cancelDiscovery()', 'android.bluetooth.IBluetooth$Stub$Proxy.cancelPairingUserInput(java.lang.String)', 'android.bluetooth.IBluetooth$Stub$Proxy.createBond(java.lang.String)', 'android.bluetooth.IBluetooth$Stub$Proxy.disable(boolean)', 'android.bluetooth.IBluetooth$Stub$Proxy.enable()', 'android.bluetooth.IBluetooth$Stub$Proxy.fetchRemoteUuids(java.lang.String,android.os.ParcelUuid,android.bluetooth.IBluetoothCallback)', 'android.bluetooth.IBluetooth$Stub$Proxy.getAddress()', 'android.bluetooth.IBluetooth$Stub$Proxy.getBluetoothState()', 'android.bluetooth.IBluetooth$Stub$Proxy.getBondState(java.lang.String)', 'android.bluetooth.IBluetooth$Stub$Proxy.getDiscoverableTimeout()', 'android.bluetooth.IBluetooth$Stub$Proxy.getName()', 'android.bluetooth.IBluetooth$Stub$Proxy.getRemoteClass(java.lang.String)', 'android.bluetooth.IBluetooth$Stub$Proxy.getRemoteName(java.lang.String)', 'android.bluetooth.IBluetooth$Stub$Proxy.getRemoteServiceChannel(java.lang.String,android.os.ParcelUuid)', 'android.bluetooth.IBluetooth$Stub$Proxy.getRemoteUuids(java.lang.String)', 'android.bluetooth.IBluetooth$Stub$Proxy.getScanMode()', 'android.bluetooth.IBluetooth$Stub$Proxy.getTrustState(java.lang.String)', 'android.bluetooth.IBluetooth$Stub$Proxy.isDiscovering()', 'android.bluetooth.IBluetooth$Stub$Proxy.isEnabled()', 'android.bluetooth.IBluetooth$Stub$Proxy.listBonds()', 'android.bluetooth.IBluetooth$Stub$Proxy.removeBond(java.lang.String)', 'android.bluetooth.IBluetooth$Stub$Proxy.removeServiceRecord(int)', 'android.bluetooth.IBluetooth$Stub$Proxy.setDiscoverableTimeout(int)', 'android.bluetooth.IBluetooth$Stub$Proxy.setName(java.lang.String)', 'android.bluetooth.IBluetooth$Stub$Proxy.setPairingConfirmation(java.lang.String,boolean)', 'android.bluetooth.IBluetooth$Stub$Proxy.setPasskey(java.lang.String,int)', 'android.bluetooth.IBluetooth$Stub$Proxy.setPin(java.lang.String,[B)', 'android.bluetooth.IBluetooth$Stub$Proxy.setScanMode(int,int)', 'android.bluetooth.IBluetooth$Stub$Proxy.setTrust(java.lang.String,boolean)', 'android.bluetooth.IBluetooth$Stub$Proxy.startDiscovery()', 'android.bluetooth.IBluetoothA2dp$Stub$Proxy.connectSink(android.bluetooth.BluetoothDevice)', 'android.bluetooth.IBluetoothA2dp$Stub$Proxy.disconnectSink(android.bluetooth.BluetoothDevice)', 'android.bluetooth.IBluetoothA2dp$Stub$Proxy.getConnectedSinks()', 'android.bluetooth.IBluetoothA2dp$Stub$Proxy.getNonDisconnectedSinks()', 'android.bluetooth.IBluetoothA2dp$Stub$Proxy.getSinkPriority(android.bluetooth.BluetoothDevice)', 'android.bluetooth.IBluetoothA2dp$Stub$Proxy.getSinkState(android.bluetooth.BluetoothDevice)', 'android.bluetooth.IBluetoothA2dp$Stub$Proxy.resumeSink(android.bluetooth.BluetoothDevice)', 'android.bluetooth.IBluetoothA2dp$Stub$Proxy.setSinkPriority(android.bluetooth.BluetoothDevice,int)', 'android.bluetooth.IBluetoothA2dp$Stub$Proxy.suspendSink(android.bluetooth.BluetoothDevice)', 'android.bluetooth.IBluetoothHeadset$Stub$Proxy.connectHeadset(android.bluetooth.BluetoothDevice)', 'android.bluetooth.IBluetoothHeadset$Stub$Proxy.disconnectHeadset()', 'android.bluetooth.IBluetoothHeadset$Stub$Proxy.getBatteryUsageHint()', 'android.bluetooth.IBluetoothHeadset$Stub$Proxy.getCurrentHeadset()', 'android.bluetooth.IBluetoothHeadset$Stub$Proxy.getPriority(android.bluetooth.BluetoothDevice)', 'android.bluetooth.IBluetoothHeadset$Stub$Proxy.getState()', 'android.bluetooth.IBluetoothHeadset$Stub$Proxy.isConnected(android.bluetooth.BluetoothDevice)', 'android.bluetooth.IBluetoothHeadset$Stub$Proxy.setPriority(android.bluetooth.BluetoothDevice,int)', 'android.bluetooth.IBluetoothHeadset$Stub$Proxy.startVoiceRecognition()', 'android.bluetooth.IBluetoothHeadset$Stub$Proxy.stopVoiceRecognition()', 'android.bluetooth.IBluetoothPbap$Stub$Proxy.connect(android.bluetooth.BluetoothDevice)', 'android.bluetooth.IBluetoothPbap$Stub$Proxy.disconnect()', 'android.bluetooth.IBluetoothPbap$Stub$Proxy.getClient()', 'android.bluetooth.IBluetoothPbap$Stub$Proxy.getState()', 'android.bluetooth.IBluetoothPbap$Stub$Proxy.isConnected(android.bluetooth.BluetoothDevice)', 'android.server.BluetoothA2dpService.<init>(android.content.Context,android.server.BluetoothService)', 'android.server.BluetoothA2dpService.addAudioSink(android.bluetooth.BluetoothDevice)', 'android.server.BluetoothA2dpService.connectSink(android.bluetooth.BluetoothDevice)', 'android.server.BluetoothA2dpService.disconnectSink(android.bluetooth.BluetoothDevice)', 'android.server.BluetoothA2dpService.getConnectedSinks()', 'android.server.BluetoothA2dpService.getNonDisconnectedSinks()', 'android.server.BluetoothA2dpService.getSinkPriority(android.bluetooth.BluetoothDevice)', 'android.server.BluetoothA2dpService.getSinkState(android.bluetooth.BluetoothDevice)', 'android.server.BluetoothA2dpService.handleSinkStateChange(android.bluetooth.BluetoothDevice)', 'android.server.BluetoothA2dpService.isSinkDevice(android.bluetooth.BluetoothDevice)', 'android.server.BluetoothA2dpService.lookupSinksMatchingStates(int[])', 'android.server.BluetoothA2dpService.onBluetoothDisable()', 'android.server.BluetoothA2dpService.onConnectSinkResult(java.lang.String,boolean)', 'android.server.BluetoothA2dpService.onSinkPropertyChanged(java.lang.String,[Ljava.lang.String;)', 'android.server.BluetoothA2dpService.resumeSink(android.bluetooth.BluetoothDevice)', 'android.server.BluetoothA2dpService.setSinkPriority(android.bluetooth.BluetoothDevice,int)', 'android.server.BluetoothA2dpService.setSinkPriority(android.bluetooth.BluetoothDevice,int)', 'android.server.BluetoothA2dpService.suspendSink(android.bluetooth.BluetoothDevice)', 'android.server.BluetoothService.addRemoteDeviceProperties(java.lang.String,[Ljava.lang.String;)', 'android.server.BluetoothService.addRfcommServiceRecord(java.lang.String,android.os.ParcelUuid,int,android.os.IBinder)', 'android.server.BluetoothService.cancelBondProcess(java.lang.String)', 'android.server.BluetoothService.cancelDiscovery()', 'android.server.BluetoothService.cancelPairingUserInput(java.lang.String)', 'android.server.BluetoothService.createBond(java.lang.String)', 'android.server.BluetoothService.disable()', 'android.server.BluetoothService.disable(boolean)', 'android.server.BluetoothService.enable()', 'android.server.BluetoothService.enable(boolean)', 'android.server.BluetoothService.fetchRemoteUuids(java.lang.String,android.os.ParcelUuid,android.bluetooth.IBluetoothCallback)', 'android.server.BluetoothService.getAddress()', 'android.server.BluetoothService.getAddressFromObjectPath(java.lang.String)', 'android.server.BluetoothService.getAllProperties()', 'android.server.BluetoothService.getBluetoothState()', 'android.server.BluetoothService.getBondState(java.lang.String)', 'android.server.BluetoothService.getDiscoverableTimeout()', 'android.server.BluetoothService.getName()', 'android.server.BluetoothService.getObjectPathFromAddress(java.lang.String)', 'android.server.BluetoothService.getProperty(java.lang.String)', 'android.server.BluetoothService.getPropertyInternal(java.lang.String)', 'android.server.BluetoothService.getRemoteClass(java.lang.String)', 'android.server.BluetoothService.getRemoteName(java.lang.String)', 'android.server.BluetoothService.getRemoteServiceChannel(java.lang.String,android.os.ParcelUuid)', 'android.server.BluetoothService.getRemoteUuids(java.lang.String)', 'android.server.BluetoothService.getScanMode()', 'android.server.BluetoothService.getTrustState(java.lang.String)', 'android.server.BluetoothService.isDiscovering()', 'android.server.BluetoothService.isEnabled()', 'android.server.BluetoothService.listBonds()', 'android.server.BluetoothService.removeBond(java.lang.String)', 'android.server.BluetoothService.removeServiceRecord(int)', 'android.server.BluetoothService.sendUuidIntent(java.lang.String)', 'android.server.BluetoothService.setDiscoverableTimeout(int)', 'android.server.BluetoothService.setLinkTimeout(java.lang.String,int)', 'android.server.BluetoothService.setName(java.lang.String)', 'android.server.BluetoothService.setPairingConfirmation(java.lang.String,boolean)', 'android.server.BluetoothService.setPasskey(java.lang.String,int)', 'android.server.BluetoothService.setPin(java.lang.String,[B)', 'android.server.BluetoothService.setPropertyBoolean(java.lang.String,boolean)', 'android.server.BluetoothService.setPropertyInteger(java.lang.String,int)', 'android.server.BluetoothService.setPropertyString(java.lang.String,java.lang.String)', 'android.server.BluetoothService.setScanMode(int,int)', 'android.server.BluetoothService.setTrust(java.lang.String,boolean)', 'android.server.BluetoothService.startDiscovery()', 'android.server.BluetoothService.updateDeviceServiceChannelCache(java.lang.String)', 'android.server.BluetoothService.updateRemoteDevicePropertiesCache(java.lang.String)'], 'android.permission.WRITE_EXTERNAL_STORAGE': [], 'android.permission.BLUETOOTH_ADMIN': ['android.bluetooth.BluetoothA2dp.connectSink(android.bluetooth.BluetoothDevice)', 'android.bluetooth.BluetoothA2dp.disconnectSink(android.bluetooth.BluetoothDevice)', 'android.bluetooth.BluetoothA2dp.resumeSink(android.bluetooth.BluetoothDevice)', 'android.bluetooth.BluetoothA2dp.setSinkPriority(android.bluetooth.BluetoothDevice,int)', 'android.bluetooth.BluetoothA2dp.suspendSink(android.bluetooth.BluetoothDevice)', 'android.bluetooth.BluetoothAdapter.cancelDiscovery()', 'android.bluetooth.BluetoothAdapter.disable()', 'android.bluetooth.BluetoothAdapter.enable()', 'android.bluetooth.BluetoothAdapter.setDiscoverableTimeout(int)', 'android.bluetooth.BluetoothAdapter.setName(java.lang.String)', 'android.bluetooth.BluetoothAdapter.startDiscovery()', 'android.bluetooth.BluetoothDevice.cancelBondProcess()', 'android.bluetooth.BluetoothDevice.cancelPairingUserInput()', 'android.bluetooth.BluetoothDevice.createBond()', 'android.bluetooth.BluetoothDevice.removeBond()', 'android.bluetooth.BluetoothDevice.setPairingConfirmation(boolean)', 'android.bluetooth.BluetoothDevice.setPasskey(int)', 'android.bluetooth.BluetoothDevice.setPin([B)', 'android.bluetooth.BluetoothHeadset.connectHeadset(android.bluetooth.BluetoothDevice)', 'android.bluetooth.BluetoothHeadset.disconnectHeadset()', 'android.bluetooth.BluetoothHeadset.setPriority(android.bluetooth.BluetoothDevice,int)', 'android.bluetooth.BluetoothPbap.disconnect()', 'android.bluetooth.IBluetooth$Stub$Proxy.cancelBondProcess(java.lang.String)', 'android.bluetooth.IBluetooth$Stub$Proxy.cancelDiscovery()', 'android.bluetooth.IBluetooth$Stub$Proxy.cancelPairingUserInput(java.lang.String)', 'android.bluetooth.IBluetooth$Stub$Proxy.createBond(java.lang.String)', 'android.bluetooth.IBluetooth$Stub$Proxy.disable(boolean)', 'android.bluetooth.IBluetooth$Stub$Proxy.enable()', 'android.bluetooth.IBluetooth$Stub$Proxy.removeBond(java.lang.String)', 'android.bluetooth.IBluetooth$Stub$Proxy.setDiscoverableTimeout(int)', 'android.bluetooth.IBluetooth$Stub$Proxy.setName(java.lang.String)', 'android.bluetooth.IBluetooth$Stub$Proxy.setPairingConfirmation(java.lang.String,boolean)', 'android.bluetooth.IBluetooth$Stub$Proxy.setPasskey(java.lang.String,int)', 'android.bluetooth.IBluetooth$Stub$Proxy.setPin(java.lang.String,[B)', 'android.bluetooth.IBluetooth$Stub$Proxy.setTrust(java.lang.String,boolean)', 'android.bluetooth.IBluetooth$Stub$Proxy.startDiscovery()', 'android.bluetooth.IBluetoothA2dp$Stub$Proxy.connectSink(android.bluetooth.BluetoothDevice)', 'android.bluetooth.IBluetoothA2dp$Stub$Proxy.disconnectSink(android.bluetooth.BluetoothDevice)', 'android.bluetooth.IBluetoothA2dp$Stub$Proxy.resumeSink(android.bluetooth.BluetoothDevice)', 'android.bluetooth.IBluetoothA2dp$Stub$Proxy.setSinkPriority(android.bluetooth.BluetoothDevice,int)', 'android.bluetooth.IBluetoothA2dp$Stub$Proxy.suspendSink(android.bluetooth.BluetoothDevice)', 'android.bluetooth.IBluetoothHeadset$Stub$Proxy.connectHeadset(android.bluetooth.BluetoothDevice)', 'android.bluetooth.IBluetoothHeadset$Stub$Proxy.disconnectHeadset()', 'android.bluetooth.IBluetoothHeadset$Stub$Proxy.setPriority(android.bluetooth.BluetoothDevice,int)', 'android.bluetooth.IBluetoothPbap$Stub$Proxy.connect(android.bluetooth.BluetoothDevice)', 'android.bluetooth.IBluetoothPbap$Stub$Proxy.disconnect()', 'android.server.BluetoothA2dpService.connectSink(android.bluetooth.BluetoothDevice)', 'android.server.BluetoothA2dpService.disconnectSink(android.bluetooth.BluetoothDevice)', 'android.server.BluetoothA2dpService.handleSinkStateChange(android.bluetooth.BluetoothDevice)', 'android.server.BluetoothA2dpService.resumeSink(android.bluetooth.BluetoothDevice)', 'android.server.BluetoothA2dpService.setSinkPriority(android.bluetooth.BluetoothDevice,int)', 'android.server.BluetoothA2dpService.setSinkPriority(android.bluetooth.BluetoothDevice,int)', 'android.server.BluetoothA2dpService.suspendSink(android.bluetooth.BluetoothDevice)', 'android.server.BluetoothService.cancelBondProcess(java.lang.String)', 'android.server.BluetoothService.cancelDiscovery()', 'android.server.BluetoothService.cancelPairingUserInput(java.lang.String)', 'android.server.BluetoothService.createBond(java.lang.String)', 'android.server.BluetoothService.disable()', 'android.server.BluetoothService.disable(boolean)', 'android.server.BluetoothService.enable()', 'android.server.BluetoothService.enable(boolean)', 'android.server.BluetoothService.removeBond(java.lang.String)', 'android.server.BluetoothService.setDiscoverableTimeout(int)', 'android.server.BluetoothService.setName(java.lang.String)', 'android.server.BluetoothService.setPairingConfirmation(java.lang.String,boolean)', 'android.server.BluetoothService.setPasskey(java.lang.String,int)', 'android.server.BluetoothService.setPin(java.lang.String,[B)', 'android.server.BluetoothService.setTrust(java.lang.String,boolean)', 'android.server.BluetoothService.startDiscovery()'], 'android.permission.WRITE_SECURE_SETTINGS': ['android.app.backup.IBackupManager$Stub$Proxy.setAutoRestore(boolean)', 'android.app.backup.IBackupManager$Stub$Proxy.setBackupEnabled(boolean)', 'android.bluetooth.BluetoothA2dp.setSinkPriority(android.bluetooth.BluetoothDevice,int)', 'android.bluetooth.BluetoothAdapter.setScanMode(int,int)', 'android.bluetooth.BluetoothAdapter.setScanMode(int)', 'android.bluetooth.IBluetooth$Stub$Proxy.setScanMode(int,int)', 'android.content.pm.IPackageManager$Stub$Proxy.setInstallLocation(int)', 'android.net.ConnectivityManager.setMobileDataEnabled(boolean)', 'android.net.ConnectivityManager.setNetworkPreference(int)', 'android.net.IConnectivityManager$Stub$Proxy.setMobileDataEnabled(boolean)', 'android.net.IConnectivityManager$Stub$Proxy.setNetworkPreference(int)', 'android.os.IPowerManager$Stub$Proxy.setMaximumScreenOffTimeount(int)', 'android.provider.Settings$Bookmarks.add(android.content.ContentResolver,android.content.Intent,java.lang.String,java.lang.String,char,int)', 'android.provider.Settings$Bookmarks.getIntentForShortcut(android.content.ContentResolver,char)', 'android.provider.Settings$Secure.putFloat(android.content.ContentResolver,java.lang.String,float)', 'android.provider.Settings$Secure.putInt(android.content.ContentResolver,java.lang.String,int)', 'android.provider.Settings$Secure.putLong(android.content.ContentResolver,java.lang.String,long)', 'android.provider.Settings$Secure.putString(android.content.ContentResolver,java.lang.String,java.lang.String)', 'android.provider.Settings$Secure.setLocationProviderEnabled(android.content.ContentResolver,java.lang.String,boolean)', 'android.server.BluetoothA2dpService.setSinkPriority(android.bluetooth.BluetoothDevice,int)', 'android.server.BluetoothService.persistBluetoothOnSetting(boolean)', 'android.server.BluetoothService.setScanMode(int,int)']}
